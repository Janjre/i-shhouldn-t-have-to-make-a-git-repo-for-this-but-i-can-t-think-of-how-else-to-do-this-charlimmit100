from gpiozero import OutputDevice
import time

# GPIO pin definitions for the 74HC595 shift register
dataPin = OutputDevice(17)      # DS Pin of 74HC595 (Pin 14)
latchPin = OutputDevice(27)     # ST_CP Pin of 74HC595 (Pin 12)
clockPin = OutputDevice(22)     # CH_CP Pin of 74HC595 (Pin 11)

LSBFIRST = 1
MSBFIRST = 2

# Function to shift out bits to 74HC595
def shiftOut(order, val):
    for i in range(8):
        clockPin.off()
        if order == LSBFIRST:
            bit = (val >> i) & 0x01
        elif order == MSBFIRST:
            bit = (val >> (7 - i)) & 0x01
        dataPin.on() if bit else dataPin.off()
        clockPin.on()

# Convert binary 8x8 array to hexadecimal list
def binary_to_hex(array):
    hex_output = []
    for col in range(8):
        col_value = 0
        for row in range(8):
            col_value |= (array[row][col] << (7 - row))
        hex_output.append(col_value)
    return hex_output

# Display hex values on the LED matrix
def display_hex_on_matrix(hex_data):
    for _ in range(500):  # Display multiple frames to create persistence of vision
        x = 0x80
        for i in range(8):
            latchPin.off()
            shiftOut(MSBFIRST, hex_data[i])  # Load the column data
            shiftOut(MSBFIRST, ~x)  # Load the row data (invert for active low)
            latchPin.on()
            time.sleep(0.001)
            x >>= 1

# Sample 8x8 binary array (replace with your input data)
example_array = [
    [0, 0, 1, 1, 1, 1, 0, 0],
    [0, 1, 0, 0, 0, 0, 1, 0],
    [0, 1, 0, 0, 0, 0, 1, 0],
    [0, 1, 1, 1, 1, 1, 1, 0],
    [0, 1, 0, 0, 0, 0, 1, 0],
    [0, 1, 0, 0, 0, 0, 1, 0],
    [0, 0, 1, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0]
]

# Convert to hex data for LED matrix display
hex_data = binary_to_hex(example_array)

# Main loop
if __name__ == '__main__':
    print('Program is starting...')
    try:
        display_hex_on_matrix(hex_data)
    except KeyboardInterrupt:
        dataPin.close()
        latchPin.close()
        clockPin.close()
        print("Ending program")
